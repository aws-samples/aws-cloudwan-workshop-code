AWSTemplateFormatVersion: "2010-09-09"
Description: Legacy infrastructure
Transform: "AWS::LanguageExtensions"

Parameters:
  LatestAmiId:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"
  CoreNetworkId:
    Type: String
    Default: ""
  Deployment:
    Type: String
    Description: Workshop deployment phase
    Default: "initial"
    AllowedValues: ["initial", "lab1", "lab2", "lab3"]

Conditions:
  Deploy: !Or
    - !Equals [!Ref Deployment, "lab2"]
    - !Equals [!Ref Deployment, "lab3"]

Mappings:
  LegacyVpcCIDR:
    eu-north-1:
      CIDR: 10.2.0.0/16
      EndpointSubneta: 10.2.2.0/28
      EndpointSubnetb: 10.2.2.16/28
      PrivateSubneta: 10.2.0.0/24
      PrivateSubnetb: 10.2.1.0/24
      TGWSubneta: 10.2.2.32/28
      TGWSubnetb: 10.2.2.48/28
    us-west-2:
      CIDR: 10.12.0.0/16
      EndpointSubneta: 10.12.2.0/28
      EndpointSubnetb: 10.12.2.16/28
      PrivateSubneta: 10.12.0.0/24
      PrivateSubnetb: 10.12.1.0/24
      TGWSubneta: 10.12.2.32/28
      TGWSubnetb: 10.12.2.48/28
  TransitGateway:
    eu-north-1:
      ASN: 65526
    us-west-2:
      ASN: 65527

Resources:
  # ---------- LEGACY VPC ----------
  # VPC
  LegacyVPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !FindInMap [LegacyVpcCIDR, !Ref 'AWS::Region', CIDR]
      Tags: 
        - Key: Name
          Value: !Join
            - '-'
            - - legacy-vpc
              - !Ref AWS::StackName
              - !Ref AWS::Region

  # For::Each iteration: per subnet type (Endpoint, Private, TGW) and AZ (2 AZs)
  # Resources to create: 6 subnets, 6 route tables, 6 route table associations - obtaining AZ affinity
  'Fn::ForEach::LegacySubnetTypes':
    - SubnetType
    - [Endpoint, Private, TGW]
    - '${SubnetType}':
      'Fn::ForEach::AZ':
        - AvailabilityZone
        - [a, b]
        - 'Legacy${SubnetType}Subnet${AvailabilityZone}':
            Type: AWS::EC2::Subnet
            Properties:
              VpcId: !Ref LegacyVPC
              AvailabilityZone: !Sub ${AWS::Region}${AvailabilityZone}
              CidrBlock: !FindInMap [LegacyVpcCIDR, !Ref 'AWS::Region', 'Fn::Sub': '${SubnetType}Subnet${AvailabilityZone}']
              Tags:
                - Key: Name
                  Value: !Join
                    - '-'
                    - - !Sub legacy-subnet-${SubnetType}-AZ${AvailabilityZone}
                      - !Ref AWS::StackName
          'Legacy${SubnetType}RouteTable${AvailabilityZone}':
            Type: AWS::EC2::RouteTable
            Properties:
              VpcId: !Ref LegacyVPC
              Tags: 
                - Key: Name
                  Value: !Join
                    - '-'
                    - - !Sub legacy-rt-${SubnetType}-AZ${AvailabilityZone}
                      - !Ref AWS::StackName
          'Legacy${SubnetType}RouteTableAssociation${AvailabilityZone}':
            Type: AWS::EC2::SubnetRouteTableAssociation
            Properties: 
              RouteTableId: !Ref
                'Fn::Sub': 'Legacy${SubnetType}RouteTable${AvailabilityZone}'
              SubnetId: !Ref
                'Fn::Sub': 'Legacy${SubnetType}Subnet${AvailabilityZone}'

  # Security Groups (Instances and EC2 Instance Connect endpoint)
  VPCLegacyInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Legacy VPC - Instance Security Group
      VpcId: !Ref LegacyVPC
  
  VPCLegacyInstanceSecurityGroupIngressICMP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref VPCLegacyInstanceSecurityGroup
      Description: Allowing ICMP traffic
      IpProtocol: icmp
      FromPort: -1
      ToPort: -1
      CidrIp: 10.0.0.0/8
  
  VPCLegacyInstanceSecurityGroupIngressEIC:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref VPCLegacyInstanceSecurityGroup
      Description: Allowing EIC connection
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId: !Ref VPCLegacyEndpointSecurityGroup
  
  VPCLegacyInstanceSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref VPCLegacyInstanceSecurityGroup
      Description: Allowing egress traffic
      IpProtocol: -1
      CidrIp: 0.0.0.0/0

  VPCLegacyEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
       
      GroupDescription: Legacy VPC - Endpoints Security Group
      VpcId: !Ref LegacyVPC
  
  VPCLegacyEndpointSecurityGroupEgressEIC:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref VPCLegacyEndpointSecurityGroup
      Description: Allowing EIC connection
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      DestinationSecurityGroupId: !Ref VPCLegacyInstanceSecurityGroup
  
  # EC2 Instance
  LegacyInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
      SecurityGroupIds:
        - !Ref VPCLegacyInstanceSecurityGroup
      SubnetId: !Ref LegacyPrivateSubneta
      ImageId: !Ref LatestAmiId
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Sub legacy-instance
              - !Ref AWS::StackName
  
  # EC2 Instance Connect Endpoint
  LegacyEICEndpoint:
    Type: AWS::EC2::InstanceConnectEndpoint
    Properties:
      PreserveClientIp: false
      SecurityGroupIds: 
        - !Ref VPCLegacyEndpointSecurityGroup
      SubnetId: !Ref LegacyEndpointSubneta
      Tags: 
        - Key: Name
          Value : !Join
            - '-'
            - - !Sub legacy-eic
              - !Ref AWS::StackName
  
  # AWS Transit Gateway
  TransitGateway:
    Type: AWS::EC2::TransitGateway
    Properties:
      Description: Legacy Infra - Transit Gateway
      AmazonSideAsn: !FindInMap [TransitGateway, !Ref 'AWS::Region', ASN]
      DefaultRouteTableAssociation: disable
      DefaultRouteTablePropagation: disable
      Tags: 
        - Key: Name
          Value: !Join
            - '-'
            - - !Sub legacy-tgw
              - !Ref AWS::Region
  
  # AWS Transit Gateway Attachment
  TransitGatewayAttachment:
    Type: AWS::EC2::TransitGatewayAttachment
    Properties:
      TransitGatewayId: !Ref TransitGateway
      VpcId: !Ref LegacyVPC
      SubnetIds: 
        - !Ref LegacyTGWSubneta
        - !Ref LegacyTGWSubnetb
      Tags: 
        - Key: Name
          Value: !Join
            - '-'
            - - !Sub legacy-tgw-attachment
              - !Ref AWS::Region
  
  # AWS Transit Gateway Route Table, Association, and Propagation
  TransitGatewayRouteTable:
    Type: AWS::EC2::TransitGatewayRouteTable
    Properties:
      TransitGatewayId: !Ref TransitGateway
      Tags: 
        - Key: Name
          Value: !Join
            - '-'
            - - !Sub legacy-tgw-rt
              - !Ref AWS::Region
  
  TransitGatewayAssociation:
    Type: AWS::EC2::TransitGatewayRouteTableAssociation
    Properties:
      TransitGatewayAttachmentId: !Ref TransitGatewayAttachment
      TransitGatewayRouteTableId: !Ref TransitGatewayRouteTable
  
  TransitGatewayPropagation:
    Type: AWS::EC2::TransitGatewayRouteTablePropagation
    Properties:
      TransitGatewayAttachmentId: !Ref TransitGatewayAttachment
      TransitGatewayRouteTableId: !Ref TransitGatewayRouteTable

  # For::Each iteration: per Availability Zone
  # 0.0.0.0/0 route from Private subnets to TGW
  'Fn::ForEach::TGWLegacyVPCRoutes':
    - AvailabilityZone
    - [a, b]
    - 'PrivateToTGW${AvailabilityZone}':
        DependsOn: 
          - TransitGatewayAttachment
        Type: AWS::EC2::Route
        Properties:
          RouteTableId: !Ref
            'Fn::Sub': 'LegacyPrivateRouteTable${AvailabilityZone}'
          DestinationCidrBlock: '0.0.0.0/0'
          TransitGatewayId: !Ref TransitGateway

  # ---------- TRANSIT GATEWAY - CLOUD WAN PEERING ----------
  # Cloud WAN - Transit Gateway peering
  TGWCWANPeering:
    Condition: Deploy
    Type: AWS::NetworkManager::TransitGatewayPeering
    Properties:
      CoreNetworkId: !Ref CoreNetworkId
      TransitGatewayArn: !Join
        - ":"
        - - "arn:aws:ec2"
          - !Ref AWS::Region
          - !Ref AWS::AccountId
          - !Join 
            - "/"
            - - "transit-gateway"
              - !GetAtt TransitGateway.Id
      Tags:
        - Key: Name
          Value: !Join
            - "-"
            - - "peering"
              - !Ref AWS::Region
 
  # TGW Policy Table and peering association (Custom Resource)
  TGWPolicyTable:
    Condition: Deploy
    Type: Custom::TGWPolicyTable
    DependsOn:
      - TGWCWANPeering
    Properties:
      ServiceToken: !GetAtt TGWPolicyTableFunction.Arn
      TransitGatewayId: !GetAtt TransitGateway.Id
      TGWPeeringAttachmentId: !GetAtt TGWCWANPeering.TransitGatewayPeeringAttachmentId

  # Transit Gateway Route Table Attachment
  TGWRouteTableAttachment:
    Condition: Deploy
    Type: AWS::NetworkManager::TransitGatewayRouteTableAttachment
    DependsOn:
      - TGWPolicyTable
    Properties:
      PeeringId: !Ref TGWCWANPeering
      TransitGatewayRouteTableArn: !Join
        - ":"
        - - "arn:aws:ec2"
          - !Ref AWS::Region
          - !Ref AWS::AccountId
          - !Join
            - "/"
            - - "transit-gateway-route-table"
              - !Ref TransitGatewayRouteTable

  CustomResourcesRole:
    Condition: Deploy
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: AllowTGWNetworkManager
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ec2:CreateTransitGatewayPolicyTable"
                  - "ec2:AssociateTransitGatewayPolicyTable"
                  - "ec2:DisassociateTransitGatewayPolicyTable"
                  - "ec2:DeleteTransitGatewayPolicyTable"
                  - "ec2:DescribeTransitGatewayPolicyTables"
                  - "ec2:DescribeRegions"
                  - "ec2:GetTransitGatewayPolicyTableAssociations"
                  - "ec2:GetTransitGatewayPolicyTableEntries"
                  - "ec2:CreateTags"
                Resource:
                  - "*"
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  TGWPolicyTableFunctionLogGroup:
    Condition: Deploy
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W84
            reason: Encryption not required for this log group
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${TGWPolicyTableFunction}
      RetentionInDays: 7

  TGWPolicyTableFunction:
    Condition: Deploy
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W58
            reason: CWL permissions granted by use of AWSLambdaBasicExecutionRole
          - id: W89
            reason: No requirement for this function to be in a VPC
          - id: W92
            reason: No requirement to limit simultaneous executions
    Type: AWS::Lambda::Function
    Properties:
      Description: Create TGW Policy Table and associate it to Cloud WAN peering
      Runtime: python3.9
      Timeout: 900
      Role: !GetAtt CustomResourcesRole.Arn
      Handler: index.lambda_handler
      Code:
        ZipFile: |-
          import sys
          import subprocess
          from pip._internal import main

          # pip3 install - update boto3 to latest version
          subprocess.call('pip3 install -I -q boto3 -t /tmp/ --no-cache-dir --disable-pip-version-check'.split(), stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
          sys.path.insert(1, '/tmp/')

          import boto3
          import os
          import logging
          import json
          import time
          import cfnresponse
          from botocore.config import Config
          from botocore.exceptions import ClientError

          log = logging.getLogger("handler")
          log.setLevel(logging.INFO)

          def lambda_handler(event, context):
              try:
                  log.info("Received event: %s", json.dumps(event))
                  log.info(boto3.__version__)

                  # We obtain the parameters from the Custom Resource Event
                  action = event["RequestType"]
                  tgw_id = event["ResourceProperties"]["TransitGatewayId"]
                  tgw_peering_attachment_id = event["ResourceProperties"]["TGWPeeringAttachmentId"]
                  # We obtain the AWS Region
                  region = os.environ['AWS_REGION']

                  # boto3 client configuration
                  ec2 = boto3.client("ec2")
                  
                  response = {}
                  
                  # Actions to perform if we are creating the resources
                  if action == "Create":
                      log.info("Creating transit gateway policy table for transit gateway %s", tgw_id)
                      response = create_tgw_policytable(ec2, tgw_id, tgw_peering_attachment_id, region)
                      
                  if action == "Delete":
                      log.info("Deleting transit gateway policy table for transit gateway %s", tgw_id)
                      response = delete_tgw_policytable(ec2, tgw_id, tgw_peering_attachment_id, region)
                      
                  if action == "Update":
                      log.info("Updating transit gateway policy table for tgw %s", tgw_id)
                      # Getting the previous values of the TGW and Core Network
                      old_tgw_peering_attachment_id = event["OldResourceProperties"]["TGWPeeringAttachmentId"]
                      # Update TGW Policy Table association
                      response = update_tgw_peering_attachment(ec2, tgw_id, old_tgw_peering_attachment_id, tgw_peering_attachment_id, region)
                      
                  if "Return" in response:
                      if response["Return"]:
                          cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                          return
                      cfnresponse.send(
                          event, context, cfnresponse.FAILED, {}, reason="API request failed"
                      )
                      return
                  
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, response)
                  log.info(response)
              
              except:
                  log.exception("whoops")
                  cfnresponse.send(
                      event,
                      context,
                      cfnresponse.FAILED,
                      {},
                      reason="Caught exception, check logs",
                  )

          def create_tgw_policytable(ec2, tgw_id, tgw_peering_attachment_id, region):
              try:
                  # Initialization of the response
                  response = {}
                  
                  # Create TGW policy table
                  tgw_policy_table_id = ec2.create_transit_gateway_policy_table(
                      TransitGatewayId=tgw_id,
                      TagSpecifications=[
                          {
                              'ResourceType': 'transit-gateway-policy-table',
                              'Tags': [
                                  {
                                      'Key': 'Name',
                                      'Value': f'tgw-policy-table-{region}'
                                  },
                              ]
                          },
                      ]
                  )['TransitGatewayPolicyTable']['TransitGatewayPolicyTableId']
                  # Adding TGW Policy Table ID in response
                  response['TransitGatewayPolicyTableId'] = tgw_policy_table_id
                          
                  # We associate the Policy Table with the Peering (via the TGW Attachment ID)
                  association_state = ec2.associate_transit_gateway_policy_table(
                      TransitGatewayPolicyTableId=tgw_policy_table_id,
                      TransitGatewayAttachmentId=tgw_peering_attachment_id
                  )['Association']['State']
                  # Waiting for the association to be available
                  while association_state == "associating":
                      time.sleep(5)
                      association_state = ec2.get_transit_gateway_policy_table_associations(TransitGatewayPolicyTableId=tgw_policy_table_id)['Associations'][0]['State']
                          
                  log.info("EVERYTHING CREATED")
                  return response
              
              except Exception as e:
                  log.exception("whoops")
                  cfnresponse.send(
                      event,
                      context,
                      cfnresponse.FAILED,
                      {},
                      reason="Caught exception, check logs",
                  )

          def delete_tgw_policytable(ec2, tgw_id, tgw_peering_attachment_id, region):
              try:
                  # Initialization of the response
                  response = {}
                  
                  # We get the Transit Gateway Policy Table ID
                  tgw_policy_table_id = ec2.describe_transit_gateway_policy_tables(
                      Filters=[
                          {
                              'Name': 'transit-gateway-id',
                              'Values': [tgw_id]
                          },
                          {
                              'Name': 'state',
                              'Values': ['available']
                          },
                          {
                              'Name': 'tag-key',
                              'Values': ['Name']
                          },
                          {
                              'Name': 'tag-value',
                              'Values': [f'tgw-policy-table-{region}']
                          }
                      ]
                  )['TransitGatewayPolicyTables'][0]['TransitGatewayPolicyTableId']
                  # Adding the TGW Policy Table ID in the response
                  response['TransitGatewayPolicyTableId'] = tgw_policy_table_id
                                        
                  # We disassociate the Transit Gateway Policy Table from the Peering
                  disassociation_state = ec2.disassociate_transit_gateway_policy_table(
                      TransitGatewayPolicyTableId=tgw_policy_table_id,
                      TransitGatewayAttachmentId=tgw_peering_attachment_id
                  )['Association']['State']
                  # We wait for the disassociation to finish
                  while disassociation_state == "disassociating":
                      time.sleep(5)
                      disassociation_state = ec2.describe_transit_gateway_policy_tables(
                          TransitGatewayPolicyTableIds = [tgw_policy_table_id]
                      )["TransitGatewayPolicyTables"][0]["State"]
                      
                  # We delete the Transit Gateway Policy Table
                  delete_tgw_policy_table = ec2.delete_transit_gateway_policy_table(TransitGatewayPolicyTableId=tgw_policy_table_id)
                                              
                  log.info("EVERYTHING DELETED")
                  return response
              
              except Exception as e:
                  log.exception("whoops")
                  cfnresponse.send(
                      event,
                      context,
                      cfnresponse.FAILED,
                      {},
                      reason="Caught exception, check logs",
                  )
        
          def update_tgw_peering_attachment(ec2, tgw_id, old_tgw_peering_attachment_id, tgw_peering_attachment_id, region):
            try:
                # Initialization of the response
                response = {}
                  
                # We get the Transit Gateway Policy Table ID
                tgw_policy_table_id = ec2.describe_transit_gateway_policy_tables(
                    Filters=[
                        {
                            'Name': 'transit-gateway-id',
                            'Values': [tgw_id]
                        },
                        {
                            'Name': 'state',
                            'Values': ['available']
                        },
                        {
                            'Name': 'tag-key',
                            'Values': ['Name']
                        },
                        {
                            'Name': 'tag-value',
                            'Values': [f'tgw-policy-table-{region}']
                        }
                    ]
                )['TransitGatewayPolicyTables'][0]['TransitGatewayPolicyTableId']
                # Adding the TGW Policy Table ID in the response
                response['TransitGatewayPolicyTableId'] = tgw_policy_table_id

                # We dissassociate the Policy Table from the old Transit Gateway Peering Attachment ID
                disassociation_state = ec2.disassociate_transit_gateway_policy_table(
                    TransitGatewayPolicyTableId=tgw_policy_table_id,
                    TransitGatewayAttachmentId=old_tgw_peering_attachment_id
                )['Association']['State']
                # We wait for the disassociation to finish
                while disassociation_state == "disassociating":
                    time.sleep(5)
                    disassociation_state = ec2.describe_transit_gateway_policy_tables(
                        TransitGatewayPolicyTableIds = [tgw_policy_table_id]
                    )["TransitGatewayPolicyTables"][0]["State"]
                
                # We associate the Policy Table to the new Transit Gateway Peering Attachment ID
                association_state = ec2.associate_transit_gateway_policy_table(
                    TransitGatewayPolicyTableId=tgw_policy_table_id,
                    TransitGatewayAttachmentId=tgw_peering_attachment_id
                )['Association']['State']
                # Waiting for the association to be available
                while association_state == "associating":
                    time.sleep(5)
                    association_state = ec2.get_transit_gateway_policy_table_associations(TransitGatewayPolicyTableId=tgw_policy_table_id)['Associations'][0]['State']
                          
                log.info("EVERYTHING CREATED")
                return response
              
            except Exception as e:
                log.exception("whoops")
                cfnresponse.send(
                    event,
                    context,
                    cfnresponse.FAILED,
                    {},
                    reason="Caught exception, check logs",
                )
