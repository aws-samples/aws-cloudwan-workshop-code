AWSTemplateFormatVersion: "2010-09-09"
Description: Inspection VPC and AWS Network Firewall
Transform: "AWS::LanguageExtensions"

Parameters:
  CoreNetworkId:
    Type: String
    Default: ""
  CoreNetworkArn:
    Type: String
    Default: ""
  Deployment:
    Type: String
    Description: Workshop deployment phase
    Default: "initial"
    AllowedValues: ["initial", "lab1", "lab2"]

Conditions:
  DeployLab1: !Equals [!Ref Deployment, "lab1"]

Mappings:
  EgressInspectionVpcCIDR:
    eu-north-1:
      CIDR: 100.64.0.0/16
      PublicSubneta: 100.64.0.0/28
      PublicSubnetb: 100.64.0.16/28
      FirewallSubneta: 100.64.0.32/28
      FirewallSubnetb: 100.64.0.48/28
      CWANSubneta: 100.64.0.64/28
      CWANSubnetb: 100.64.0.80/28
    us-west-2:
      CIDR: 100.64.0.0/16
      PublicSubneta: 100.64.0.0/28
      PublicSubnetb: 100.64.0.16/28
      FirewallSubneta: 100.64.0.32/28
      FirewallSubnetb: 100.64.0.48/28
      CWANSubneta: 100.64.0.64/28
      CWANSubnetb: 100.64.0.80/28
  InspectionVpcCIDR:
    eu-north-1:
      CIDR: 100.64.0.0/16
      FirewallSubneta: 100.64.0.0/28
      FirewallSubnetb: 100.64.0.16/28
      CWANSubneta: 100.64.0.32/28
      CWANSubnetb: 100.64.0.48/28
    us-west-2:
      CIDR: 100.64.0.0/16
      FirewallSubneta: 100.64.0.0/28
      FirewallSubnetb: 100.64.0.16/28
      CWANSubneta: 100.64.0.32/28
      CWANSubnetb: 100.64.0.48/28

Resources:
  # ---------- Egress Inspection VPC ----------
  EgressInspectionVPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !FindInMap [EgressInspectionVpcCIDR, !Ref 'AWS::Region', CIDR]
      Tags: 
        - Key: Name
          Value: !Join
            - '-'
            - - egress-inspection-vpc
              - !Ref AWS::StackName
              - !Ref AWS::Region

  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags: 
        - Key: Name
          Value: igw
  
  IGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref EgressInspectionVPC

  # For::Each iteration: per subnet type (Firewall, CWAN, Public) and AZ (2 AZs)
  # Resources to create: 6 subnets, 6 route tables, 6 route table associations - obtaining AZ affinity
  'Fn::ForEach::EgressInspectionSubnetTypes':
    - SubnetType
    - [Firewall, CWAN, Public]
    - '${SubnetType}':
      'Fn::ForEach::AZ':
        - AvailabilityZone
        - [a, b]
        - 'EgressInspection${SubnetType}Subnet${AvailabilityZone}':
            Type: AWS::EC2::Subnet
            Properties:
              VpcId: !Ref EgressInspectionVPC
              AvailabilityZone: !Sub ${AWS::Region}${AvailabilityZone}
              CidrBlock: !FindInMap [EgressInspectionVpcCIDR, !Ref 'AWS::Region', 'Fn::Sub': '${SubnetType}Subnet${AvailabilityZone}']
              Tags:
                - Key: Name
                  Value: !Join
                    - '-'
                    - - !Sub egress-inspection-subnet-${SubnetType}-AZ${AvailabilityZone}
                      - !Ref AWS::StackName
          'EgressInspection${SubnetType}RouteTable${AvailabilityZone}':
            Type: AWS::EC2::RouteTable
            Properties:
              VpcId: !Ref EgressInspectionVPC
              Tags: 
                - Key: Name
                  Value: !Join
                    - '-'
                    - - !Sub egress-inspection-rt-${SubnetType}-AZ${AvailabilityZone}
                      - !Ref AWS::StackName
          'EgressInspection${SubnetType}RouteTableAssociation${AvailabilityZone}':
            Type: AWS::EC2::SubnetRouteTableAssociation
            Properties: 
              RouteTableId: !Ref
                'Fn::Sub': 'EgressInspection${SubnetType}RouteTable${AvailabilityZone}'
              SubnetId: !Ref
                'Fn::Sub': 'EgressInspection${SubnetType}Subnet${AvailabilityZone}'
  
  # For::Each iteration: per Availability Zone
  # 1 - 0.0.0.0/0 route from Public subnets to IGW
  # 2 - 0.0.0.0/0 route from Firewall subnets to NATGW
  # 3 - NAT gateways and Elastic IPs
  'Fn::ForEach::EgressInspectionVPCRoutes':
    - AvailabilityZone
    - [a, b]
    - 'DefaultPublicToIGW${AvailabilityZone}':
        Type: AWS::EC2::Route
        Properties:
          RouteTableId: !Ref
            'Fn::Sub': 'EgressInspectionPublicRouteTable${AvailabilityZone}'
          DestinationCidrBlock: '0.0.0.0/0'
          GatewayId: !Ref IGW
      'DefaultFirewallToNATGW${AvailabilityZone}':
        Type: AWS::EC2::Route
        Properties:
          RouteTableId: !Ref
            'Fn::Sub': 'EgressInspectionFirewallRouteTable${AvailabilityZone}'
          DestinationCidrBlock: '0.0.0.0/0'
          NatGatewayId: !Ref 
            'Fn::Sub': 'EgressInspectionNATGW${AvailabilityZone}'
      'EgressInspectionNATGW${AvailabilityZone}':
        Type: AWS::EC2::NatGateway
        Properties:
          AllocationId: !GetAtt
            - 'Fn::Sub': 'EgressInspectionEIP${AvailabilityZone}'
            - AllocationId
          SubnetId: !Ref
            'Fn::Sub': 'EgressInspectionPublicSubnet${AvailabilityZone}'
      'EgressInspectionEIP${AvailabilityZone}':
        Type: AWS::EC2::EIP
        Properties:
          Domain: vpc
  
  # Network Firewall resource
  NetworkFirewall:
    Type: AWS::NetworkFirewall::Firewall
    Properties:
      FirewallName: !Join
        - "-"
        - - "egress-inspection-firewall"
          - !Ref AWS::Region
      FirewallPolicyArn: !GetAtt NetworkFirewallRulesPolicy.FirewallPolicyArn
      VpcId: !Ref EgressInspectionVPC
      SubnetMappings:
        - SubnetId: !Ref EgressInspectionFirewallSubneta
        - SubnetId: !Ref EgressInspectionFirewallSubnetb
  
  # Firewall Policy
  NetworkFirewallRulesPolicy:
    Type: AWS::NetworkFirewall::FirewallPolicy
    Properties:
      FirewallPolicy:
        StatelessDefaultActions:
          - "aws:forward_to_sfe"
        StatelessFragmentDefaultActions:
          - "aws:forward_to_sfe"
        StatelessRuleGroupReferences:
          - Priority: 10
            ResourceArn: !GetAtt NetworkFirewallStatelessDropRemote.RuleGroupArn
        StatefulEngineOptions:
          RuleOrder: STRICT_ORDER
        StatefulDefaultActions:
          - "aws:drop_strict"
          - "aws:alert_strict"
        StatefulRuleGroupReferences:
          - Priority: 10
            ResourceArn: !GetAtt NetworkFirewallStatefulAllowDomains.RuleGroupArn
          - Priority: 20
            ResourceArn: !GetAtt NetworkFirewallStatefulAllowIcmp.RuleGroupArn  
      FirewallPolicyName: !Join
        - "-"
        - - "egress-inspection-firewall-policy"
          - !Ref AWS::Region
  
  # Stateless Rule Group - Dropping any SSH connection
  NetworkFirewallStatelessDropRemote:
    Type: AWS::NetworkFirewall::RuleGroup
    Properties:
      Capacity: 2
      RuleGroupName: !Join
        - "-"
        - - "drop-remote"
          - !Ref AWS::StackName
      Description: Drop remote SSH connections
      Type: STATELESS
      RuleGroup:
        RulesSource:
          StatelessRulesAndCustomActions:
            StatelessRules:
              - Priority: 1
                RuleDefinition:
                  MatchAttributes:
                    Protocols:
                      - 6
                    Sources:
                      - AddressDefinition: 0.0.0.0/0
                    SourcePorts:
                      - FromPort: 22
                        ToPort: 22
                    Destinations:
                      - AddressDefinition: 0.0.0.0/0
                    DestinationPorts:
                      - FromPort: 22
                        ToPort: 22
                  Actions:
                    - "aws:drop"

  # Stateful Rule Group - Domain Pass
  NetworkFirewallStatefulAllowDomains:
    Type: AWS::NetworkFirewall::RuleGroup
    Properties:
      Capacity: 100
      RuleGroupName: !Join
        - "-"
        - - "allow-domain"
          - !Ref AWS::StackName
      Description: Allowing domains
      Type: STATEFUL
      RuleGroup:
        StatefulRuleOptions:
          RuleOrder: STRICT_ORDER
        RulesSource:
          RulesString: |-
            pass tcp any any <> $EXTERNAL_NET 443 (msg:"Allowing TCP in port 443"; flow:not_established; sid:892123; rev:1;)
            pass tls any any -> $EXTERNAL_NET 443 (tls.sni; dotprefix; content:".amazon.com"; endswith; msg:"Allowing .amazon.com HTTPS requests"; sid:892125; rev:1;)
  
  # Stateful Rule Group - ICMP Alert and Pass
  NetworkFirewallStatefulAllowIcmp:
    Type: AWS::NetworkFirewall::RuleGroup
    Properties:
      Capacity: 100
      RuleGroupName: !Join
        - "-"
        - - "allow-icmp"
          - !Ref AWS::StackName
      Type: STATEFUL
      RuleGroup:
        StatefulRuleOptions:
          RuleOrder: STRICT_ORDER
        RulesSource:
          RulesString: |-
            alert icmp 10.0.0.0/8 any -> 10.0.0.0/8 any (msg:"Alert on ICMP traffic between/within Prod and Third Party VPCs"; sid:199407051; rev:1;)
            pass icmp 10.0.0.0/8 any -> 10.0.0.0/8 any (msg:"Allow ICMP traffic between/within Prod and Third Party VPCs"; sid:199407052; rev:1;)
            alert icmp 10.0.0.0/8 any -> 192.168.100.0/24 any (msg:"Alert on ICMP traffic from Prod/Third Party to On-Premises"; sid:199407053; rev:1;)
            pass icmp 10.0.0.0/8 any -> 192.168.100.0/24 any (msg:"Allow ICMP traffic from Prod/Third Party to On-Premises"; sid:199407054; rev:1;)

  # CloudWatch log group (Flow)
  EgressInspectionVpcFirewallLogFlowGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/network-firewall/egress-inspection/${AWS::Region}/flow

  # CloudWatch log group (Alert)
  EgressInspectionVpcFirewallLogAlertGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/network-firewall/egress-inspection/${AWS::Region}/alert

  # AWS Network Firewall log configuration
  EgressInspectionVpcFirewallLog:
    Type: AWS::NetworkFirewall::LoggingConfiguration
    Properties:
      FirewallArn: !Ref NetworkFirewall
      LoggingConfiguration:
        LogDestinationConfigs:
          - LogType: FLOW
            LogDestinationType: CloudWatchLogs
            LogDestination:
              logGroup: !Ref EgressInspectionVpcFirewallLogFlowGroup
          - LogType: ALERT
            LogDestinationType: CloudWatchLogs
            LogDestination:
              logGroup: !Ref EgressInspectionVpcFirewallLogAlertGroup

  # ---------- CUSTOM RESOURCE: VPC routes to Network Firewall (Egress Inspection VPC) ----------  
  # Routes from Public subnets to network via the Firewall endpoints
  RoutePublicToFirewall1:
    Type: Custom::RouteTableEntry
    DependsOn:
      - FunctionLogGroup
    Properties:
      ServiceToken: !GetAtt FirewallRouteFunction.Arn
      FirewallArn: !GetAtt NetworkFirewall.FirewallArn
      SubnetAz: !GetAtt EgressInspectionFirewallSubneta.AvailabilityZone
      DestinationCidr: "10.0.0.0/8"
      RouteTableId: !Ref EgressInspectionPublicRouteTablea

  RoutePublicToFirewall2:
    Type: Custom::RouteTableEntry
    DependsOn:
      - FunctionLogGroup
    Properties:
      ServiceToken: !GetAtt FirewallRouteFunction.Arn
      FirewallArn: !GetAtt NetworkFirewall.FirewallArn
      SubnetAz: !GetAtt EgressInspectionFirewallSubnetb.AvailabilityZone
      DestinationCidr: "10.0.0.0/8"
      RouteTableId: !Ref EgressInspectionPublicRouteTableb

  # Routes from CWAN subnets to Internet via the Firewall endpoints
  RouteCWANToFirewall1:
    Type: Custom::RouteTableEntry
    DependsOn:
      - FunctionLogGroup
    Properties:
      ServiceToken: !GetAtt FirewallRouteFunction.Arn
      FirewallArn: !GetAtt NetworkFirewall.FirewallArn
      SubnetAz: !GetAtt EgressInspectionFirewallSubneta.AvailabilityZone
      DestinationCidr: "0.0.0.0/0"
      RouteTableId: !Ref EgressInspectionCWANRouteTablea

  RouteCWANToFirewall2:
    Type: Custom::RouteTableEntry
    DependsOn:
      - FunctionLogGroup
    Properties:
      ServiceToken: !GetAtt FirewallRouteFunction.Arn
      FirewallArn: !GetAtt NetworkFirewall.FirewallArn
      SubnetAz: !GetAtt EgressInspectionFirewallSubnetb.AvailabilityZone
      DestinationCidr: "0.0.0.0/0"
      RouteTableId: !Ref EgressInspectionCWANRouteTableb

  # Lambda functions to create routes to Firewall endpoints
  RouteFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: AllowLambdaVPC
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:CreateRoute
                  - ec2:UpdateRoute
                  - ec2:DeleteRoute
                Resource:
                  - !Sub arn:aws:ec2:*:*:route-table/*
              - Effect: Allow
                Action:
                  - network-firewall:DescribeFirewall
                Resource:
                  - !GetAtt NetworkFirewall.FirewallArn
                  - !GetAtt InspectionNetworkFirewall.FirewallArn
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  FunctionLogGroup:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W84
            reason: Encryption not required for this log group
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: '/aws/lambda/VPCRouteFunctions'
      RetentionInDays: 7

  FirewallRouteFunction:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W58
            reason: CWL permissions granted by use of AWSLambdaBasicExecutionRole
          - id: W89
            reason: No requirement for this function to be in a VPC
          - id: W92
            reason: No requirement to limit simultaneous executions
    Type: AWS::Lambda::Function
    Properties:
      Description: Manage route table entry for CoreNetwork
      Runtime: python3.12
      Timeout: 10
      Role: !GetAtt RouteFunctionRole.Arn
      Handler: index.on_event
      Code:
        ZipFile: |-
          import logging
          from typing import Dict
          import boto3
          import cfnresponse

          logger = logging.getLogger(__name__)

          nfw = boto3.client("network-firewall")
          ec2 = boto3.client("ec2")
          response = {}

          def get_data(firewall_arn: str) -> Dict[str, str]:
              response = nfw.describe_firewall(FirewallArn=firewall_arn)
              return {
                  k: v["Attachment"]["EndpointId"]
                  for k, v in response["FirewallStatus"]["SyncStates"].items()
              }

          def create(event):
              logical_id: str = event["LogicalResourceId"]
              request_id: str = event["RequestId"]
              physical_resource_id = f'{logical_id}-{request_id.replace("-", "")}.txt'
              firewall_arn = event["ResourceProperties"]["FirewallArn"]
              subnet_az = event["ResourceProperties"]["SubnetAz"]
              destination_cidr = event["ResourceProperties"]["DestinationCidr"]
              route_table_id = event["ResourceProperties"]["RouteTableId"]

              endpoints = get_data(firewall_arn)
              ec2.create_route(
                  DestinationCidrBlock=destination_cidr,
                  RouteTableId=route_table_id,
                  VpcEndpointId=endpoints[subnet_az],
              )
              return physical_resource_id

          def update(event):
              logical_id: str = event["LogicalResourceId"]
              request_id: str = event["RequestId"]
              physical_resource_id = f'{logical_id}-{request_id.replace("-", "")}.txt'
              return physical_resource_id

          def delete(event):
              route_table_id = event["ResourceProperties"]["RouteTableId"]
              destination_cidr = event["ResourceProperties"]["DestinationCidr"]
              ec2.delete_route(DestinationCidrBlock=destination_cidr, RouteTableId=route_table_id)

          def on_event(event, context):
            if event["RequestType"] == "Create":
              physical_resource_id = create(event)
              cfnresponse.send(event,context,cfnresponse.SUCCESS, {})
              return
            elif event["RequestType"] == "Update":
              update(event),
              cfnresponse.send(event,context, cfnresponse.SUCCESS, {})
              return
            elif event["RequestType"] == "Delete":
              delete(event)
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
              return

  # ---------- INSPECTION VPC ----------
  InspectionVPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !FindInMap [InspectionVpcCIDR, !Ref 'AWS::Region', CIDR]
      Tags: 
        - Key: Name
          Value: !Join
            - '-'
            - - inspection-vpc
              - !Ref AWS::StackName
              - !Ref AWS::Region

  # Subnets, Route Tables, and Associations
  'Fn::ForEach::InspectionSubnetTypes':
    - SubnetType
    - [Firewall, CWAN]
    - '${SubnetType}':
      'Fn::ForEach::AZ':
        - AvailabilityZone
        - [a, b]
        - 'Inspection${SubnetType}Subnet${AvailabilityZone}':
            Type: AWS::EC2::Subnet
            Properties:
              VpcId: !Ref InspectionVPC
              AvailabilityZone: !Sub ${AWS::Region}${AvailabilityZone}
              CidrBlock: !FindInMap [InspectionVpcCIDR, !Ref 'AWS::Region', 'Fn::Sub': '${SubnetType}Subnet${AvailabilityZone}']
              Tags:
                - Key: Name
                  Value: !Join
                    - '-'
                    - - !Sub inspection-subnet-${SubnetType}-AZ${AvailabilityZone}
                      - !Ref AWS::StackName
          'Inspection${SubnetType}RouteTable${AvailabilityZone}':
            Type: AWS::EC2::RouteTable
            Properties:
              VpcId: !Ref InspectionVPC
              Tags: 
                - Key: Name
                  Value: !Join
                    - '-'
                    - - !Sub inspection-rt-${SubnetType}-AZ${AvailabilityZone}
                      - !Ref AWS::StackName

          'Inspection${SubnetType}RouteTableAssociation${AvailabilityZone}':
            Type: AWS::EC2::SubnetRouteTableAssociation
            Properties: 
              RouteTableId: !Ref
                'Fn::Sub': 'Inspection${SubnetType}RouteTable${AvailabilityZone}'
              SubnetId: !Ref
                'Fn::Sub': 'Inspection${SubnetType}Subnet${AvailabilityZone}'

  # Network Firewall
  InspectionNetworkFirewall:
    Type: AWS::NetworkFirewall::Firewall
    Properties:
      FirewallName: !Sub inspection-firewall-${AWS::Region}
      FirewallPolicyArn: !Ref InspectionFirewallPolicy
      VpcId: !Ref InspectionVPC
      SubnetMappings:
        - SubnetId: !Ref InspectionFirewallSubneta
        - SubnetId: !Ref InspectionFirewallSubnetb

  # Firewall Policy
  InspectionFirewallPolicy:
    Type: AWS::NetworkFirewall::FirewallPolicy
    Properties:
      FirewallPolicy:
        StatelessDefaultActions:
          - "aws:forward_to_sfe"
        StatelessFragmentDefaultActions:
          - "aws:forward_to_sfe"
        StatefulEngineOptions:
          RuleOrder: STRICT_ORDER
        StatefulDefaultActions:
          - "aws:drop_strict"
          - "aws:alert_strict"
        StatefulRuleGroupReferences:
          - Priority: 10
            ResourceArn: !GetAtt NetworkFirewallStatefulAllowIcmp.RuleGroupArn  
      FirewallPolicyName: !Sub inspection-firewall-policy-${AWS::Region}

  # CloudWatch Log Groups
  InspectionFirewallLogFlowGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/network-firewall/inspection/${AWS::Region}/flow

  InspectionFirewallLogAlertGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/network-firewall/inspection/${AWS::Region}/alert

  # Firewall Logging Configuration
  InspectionFirewallLogging:
    Type: AWS::NetworkFirewall::LoggingConfiguration
    Properties:
      FirewallArn: !Ref InspectionNetworkFirewall
      LoggingConfiguration:
        LogDestinationConfigs:
          - LogType: FLOW
            LogDestinationType: CloudWatchLogs
            LogDestination:
              logGroup: !Ref InspectionFirewallLogFlowGroup
          - LogType: ALERT
            LogDestinationType: CloudWatchLogs
            LogDestination:
              logGroup: !Ref InspectionFirewallLogAlertGroup

  # ---------- CUSTOM RESOURCE: VPC routes to Network Firewall (InspectionVPC) ----------
  RouteInspectionCWANToFirewall1:
    Type: Custom::RouteTableEntry
    DependsOn:
      - FunctionLogGroup
    Properties:
      ServiceToken: !GetAtt FirewallRouteFunction.Arn
      FirewallArn: !GetAtt InspectionNetworkFirewall.FirewallArn
      SubnetAz: !GetAtt InspectionFirewallSubneta.AvailabilityZone
      DestinationCidr: "0.0.0.0/0"
      RouteTableId: !Ref InspectionCWANRouteTablea

  RouteInspectionCWANToFirewall2:
    Type: Custom::RouteTableEntry
    DependsOn:
      - FunctionLogGroup
    Properties:
      ServiceToken: !GetAtt FirewallRouteFunction.Arn
      FirewallArn: !GetAtt InspectionNetworkFirewall.FirewallArn
      SubnetAz: !GetAtt InspectionFirewallSubnetb.AvailabilityZone
      DestinationCidr: "0.0.0.0/0"
      RouteTableId: !Ref InspectionCWANRouteTableb

  # ---------- CLOUD WAN ATTACHMENT ----------
  # Egress VPC
  EgressInspectionCWANAttachment:
    Condition: DeployLab1
    Type: AWS::NetworkManager::VpcAttachment
    Properties:
      CoreNetworkId: !Ref CoreNetworkId
      SubnetArns:
        - Fn::Join:
            - ""
            - - "arn:aws:ec2:"
              - Ref: AWS::Region
              - ":"
              - Ref: AWS::AccountId
              - ":subnet/"
              - Ref: EgressInspectionCWANSubneta
        - Fn::Join:
            - ""
            - - "arn:aws:ec2:"
              - Ref: AWS::Region
              - ":"
              - Ref: AWS::AccountId
              - ":subnet/"
              - Ref: EgressInspectionCWANSubnetb
      Tags:
        - Key: nfg
          Value: egressinspection
      VpcArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":ec2:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":vpc/"
            - Ref: EgressInspectionVPC
  
  # For::Each iteration: per Availability Zone
  # 0.0.0.0/0 route from Private subnets to CWAN
  'Fn::ForEach::EgressInspectionVPCCWANRoutes':
    - AvailabilityZone
    - [a, b]
    - 'EgressInspectionToCWAN${AvailabilityZone}':
        DependsOn: 
          - EgressInspectionCWANAttachment
        Type: AWS::EC2::Route
        Condition: DeployLab1
        Properties:
          RouteTableId: !Ref
            'Fn::Sub': 'EgressInspectionFirewallRouteTable${AvailabilityZone}'
          DestinationCidrBlock: '10.0.0.0/8'
          CoreNetworkArn: !Ref CoreNetworkArn
  
  # Inspection VPC
  InspectionCWANAttachment:
    Condition: DeployLab1
    Type: AWS::NetworkManager::VpcAttachment
    Properties:
      CoreNetworkId: !Ref CoreNetworkId
      SubnetArns:
        - Fn::Join:
            - ""
            - - "arn:aws:ec2:"
              - Ref: AWS::Region
              - ":"
              - Ref: AWS::AccountId
              - ":subnet/"
              - Ref: InspectionCWANSubneta
        - Fn::Join:
            - ""
            - - "arn:aws:ec2:"
              - Ref: AWS::Region
              - ":"
              - Ref: AWS::AccountId
              - ":subnet/"
              - Ref: InspectionCWANSubnetb
      Tags:
        - Key: nfg
          Value: inspection
      VpcArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":ec2:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":vpc/"
            - Ref: InspectionVPC
  
  # For::Each iteration: per Availability Zone
  # 0.0.0.0/0 route from Private subnets to CWAN
  'Fn::ForEach::InspectionVPCCWANRoutes':
    - AvailabilityZone
    - [a, b]
    - 'InspectionToCWAN${AvailabilityZone}':
        DependsOn: 
          - InspectionCWANAttachment
        Type: AWS::EC2::Route
        Condition: DeployLab1
        Properties:
          RouteTableId: !Ref
            'Fn::Sub': 'InspectionFirewallRouteTable${AvailabilityZone}'
          DestinationCidrBlock: '0.0.0.0/0'
          CoreNetworkArn: !Ref CoreNetworkArn