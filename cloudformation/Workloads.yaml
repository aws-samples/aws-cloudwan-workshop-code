AWSTemplateFormatVersion: "2010-09-09"
Description: Production, and non-production infrastructure
Transform: "AWS::LanguageExtensions"

Parameters:
  LatestAmiId:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"
  CoreNetworkId:
    Type: String
    Default: ""
  CoreNetworkArn:
    Type: String
    Default: ""
  Deployment:
    Type: String
    Description: Workshop deployment phase
    Default: "initial"
    AllowedValues: ["initial", "lab1", "lab2", "lab3"]

Conditions:
  Deploy: !Or 
    - !Equals [!Ref Deployment, "lab1"]
    - !Equals [!Ref Deployment, "lab2"]
    - !Equals [!Ref Deployment, "lab3"]

Mappings:
  ProdVpcCIDR:
    eu-north-1: 
      CIDR: 10.0.0.0/16
      EndpointSubneta: 10.0.2.0/28
      EndpointSubnetb: 10.0.2.16/28
      PrivateSubneta: 10.0.0.0/24
      PrivateSubnetb: 10.0.1.0/24
      CWANSubneta: 10.0.2.32/28
      CWANSubnetb: 10.0.2.48/28
    us-west-2:
      CIDR: 10.10.0.0/16
      EndpointSubneta: 10.10.2.0/28
      EndpointSubnetb: 10.10.2.16/28
      PrivateSubneta: 10.10.0.0/24
      PrivateSubnetb: 10.10.1.0/24
      CWANSubneta: 10.10.2.32/28
      CWANSubnetb: 10.10.2.48/28
  ThirdPartyVpcCIDR:
    eu-north-1:
      CIDR: 10.1.0.0/16
      EndpointSubneta: 10.1.2.0/28
      EndpointSubnetb: 10.1.2.16/28
      PrivateSubneta: 10.1.0.0/24
      PrivateSubnetb: 10.1.1.0/24
      CWANSubneta: 10.1.2.32/28
      CWANSubnetb: 10.1.2.48/28
    us-west-2:
      CIDR: 10.11.0.0/16
      EndpointSubneta: 10.11.2.0/28
      EndpointSubnetb: 10.11.2.16/28
      PrivateSubneta: 10.11.0.0/24
      PrivateSubnetb: 10.11.1.0/24
      CWANSubneta: 10.11.2.32/28
      CWANSubnetb: 10.11.2.48/28

Resources:
  # ---------- PRODUCTION VPC ----------
  ProductionVPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !FindInMap [ProdVpcCIDR, !Ref 'AWS::Region', CIDR]
      Tags: 
        - Key: Name
          Value: !Join
            - '-'
            - - prod-vpc
              - !Ref AWS::StackName
              - !Ref AWS::Region

  # For::Each iteration: per subnet type (Endpoint, Private, CWAN) and AZ (2 AZs)
  # Resources to create: 6 subnets, 6 route tables, 6 route table associations - obtaining AZ affinity
  'Fn::ForEach::ProductionSubnetTypes':
    - SubnetType
    - [Endpoint, Private, CWAN]
    - '${SubnetType}':
      'Fn::ForEach::AZ':
        - AvailabilityZone
        - [a, b]
        - 'Production${SubnetType}Subnet${AvailabilityZone}':
            Type: AWS::EC2::Subnet
            Properties:
              VpcId: !Ref ProductionVPC
              AvailabilityZone: !Sub ${AWS::Region}${AvailabilityZone}
              CidrBlock: !FindInMap [ProdVpcCIDR, !Ref 'AWS::Region', 'Fn::Sub': '${SubnetType}Subnet${AvailabilityZone}']
              Tags:
                - Key: Name
                  Value: !Join
                    - '-'
                    - - !Sub prod-subnet-${SubnetType}-AZ${AvailabilityZone}
                      - !Ref AWS::StackName
          'Production${SubnetType}RouteTable${AvailabilityZone}':
            Type: AWS::EC2::RouteTable
            Properties:
              VpcId: !Ref ProductionVPC
              Tags: 
                - Key: Name
                  Value: !Join
                    - '-'
                    - - !Sub prod-rt-${SubnetType}-AZ${AvailabilityZone}
                      - !Ref AWS::StackName
          'Production${SubnetType}RouteTableAssociation${AvailabilityZone}':
            Type: AWS::EC2::SubnetRouteTableAssociation
            Properties: 
              RouteTableId: !Ref
                'Fn::Sub': 'Production${SubnetType}RouteTable${AvailabilityZone}'
              SubnetId: !Ref
                'Fn::Sub': 'Production${SubnetType}Subnet${AvailabilityZone}'

  # Security Groups (Instances and EC2 Instance Connect endpoint)
  VPCProdInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Production VPC - Instance Security Group
      VpcId: !Ref ProductionVPC
  
  VPCProdInstanceSecurityGroupIngressICMP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref VPCProdInstanceSecurityGroup
      Description: Allowing ICMP traffic
      IpProtocol: icmp
      FromPort: -1
      ToPort: -1
      CidrIp: 10.0.0.0/8
  
  VPCProdInstanceSecurityGroupIngressEIC:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref VPCProdInstanceSecurityGroup
      Description: Allowing EIC connection
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId: !Ref VPCProdEndpointSecurityGroup
  
  VPCProdInstanceSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref VPCProdInstanceSecurityGroup
      Description: Allowing egress traffic
      IpProtocol: -1
      CidrIp: 0.0.0.0/0

  VPCProdEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Production VPC - Endpoints Security Group
      VpcId: !Ref ProductionVPC
  
  VPCProdEndpointSecurityGroupEgressEIC:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref VPCProdEndpointSecurityGroup
      Description: Allowing EIC connection
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      DestinationSecurityGroupId: !Ref VPCProdInstanceSecurityGroup
  
  # EC2 Instance
  ProductionInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
      SecurityGroupIds:
        - !Ref VPCProdInstanceSecurityGroup
      SubnetId: !Ref ProductionPrivateSubneta
      ImageId: !Ref LatestAmiId
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Sub prod-instance
              - !Ref AWS::StackName
  
  # EC2 Instance Connect Endpoint
  ProdEICEndpoint:
    Type: AWS::EC2::InstanceConnectEndpoint
    Properties:
      PreserveClientIp: false
      SecurityGroupIds: 
        - !Ref VPCProdEndpointSecurityGroup
      SubnetId: !Ref ProductionEndpointSubneta
      Tags: 
        - Key: Name
          Value : !Join
            - '-'
            - - !Sub prod-eic
              - !Ref AWS::StackName

  # ---------- THIRD PARTY VPC ----------
  # VPC
  ThirdPartyVPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !FindInMap [ThirdPartyVpcCIDR, !Ref 'AWS::Region', CIDR]
      Tags: 
        - Key: Name
          Value: !Join
            - '-'
            - - thirdparty-vpc
              - !Ref AWS::StackName
              - !Ref AWS::Region

  # For::Each iteration: per subnet type (Endpoint, Private, CWAN) and AZ (2 AZs)
  # Resources to create: 6 subnets, 6 route tables, 6 route table associations - obtaining AZ affinity
  'Fn::ForEach::ThirdPartySubnetTypes':
    - SubnetType
    - [Endpoint, Private, CWAN]
    - '${SubnetType}':
      'Fn::ForEach::AZ':
        - AvailabilityZone
        - [a, b]
        - 'ThirdParty${SubnetType}Subnet${AvailabilityZone}':
            Type: AWS::EC2::Subnet
            Properties:
              VpcId: !Ref ThirdPartyVPC
              AvailabilityZone: !Sub ${AWS::Region}${AvailabilityZone}
              CidrBlock: !FindInMap [ThirdPartyVpcCIDR, !Ref 'AWS::Region', 'Fn::Sub': '${SubnetType}Subnet${AvailabilityZone}']
              Tags:
                - Key: Name
                  Value: !Join
                    - '-'
                    - - !Sub thirdparty-subnet-${SubnetType}-AZ${AvailabilityZone}
                      - !Ref AWS::StackName
          'ThirdParty${SubnetType}RouteTable${AvailabilityZone}':
            Type: AWS::EC2::RouteTable
            Properties:
              VpcId: !Ref ThirdPartyVPC
              Tags: 
                - Key: Name
                  Value: !Join
                    - '-'
                    - - !Sub thirdparty-rt-${SubnetType}-AZ${AvailabilityZone}
                      - !Ref AWS::StackName
          'ThirdParty${SubnetType}RouteTableAssociation${AvailabilityZone}':
            Type: AWS::EC2::SubnetRouteTableAssociation
            Properties: 
              RouteTableId: !Ref
                'Fn::Sub': 'ThirdParty${SubnetType}RouteTable${AvailabilityZone}'
              SubnetId: !Ref
                'Fn::Sub': 'ThirdParty${SubnetType}Subnet${AvailabilityZone}'

  # Security Groups (Instances and EC2 Instance Connect endpoint)
  VPCThirdPartyInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Third-Party VPC - Instance Security Group
      VpcId: !Ref ThirdPartyVPC
  
  VPCThirdPartyInstanceSecurityGroupIngressICMP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref VPCThirdPartyInstanceSecurityGroup
      Description: Allowing ICMP traffic
      IpProtocol: icmp
      FromPort: -1
      ToPort: -1
      CidrIp: 10.0.0.0/8
  
  VPCThirdPartyInstanceSecurityGroupIngressEIC:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref VPCThirdPartyInstanceSecurityGroup
      Description: Allowing EIC connection
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId: !Ref VPCThirdPartyEndpointSecurityGroup
  
  VPCThirdPartyInstanceSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref VPCThirdPartyInstanceSecurityGroup
      Description: Allowing egress traffic
      IpProtocol: -1
      CidrIp: 0.0.0.0/0

  VPCThirdPartyEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Third-Party VPC - Endpoints Security Group
      VpcId: !Ref ThirdPartyVPC
  
  VPCThirdPartyEndpointSecurityGroupEgressEIC:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref VPCThirdPartyEndpointSecurityGroup
      Description: Allowing EIC connection
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      DestinationSecurityGroupId: !Ref VPCThirdPartyInstanceSecurityGroup
  
  # EC2 Instance
  ThirdPartyInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
      SecurityGroupIds:
        - !Ref VPCThirdPartyInstanceSecurityGroup
      SubnetId: !Ref ThirdPartyPrivateSubneta
      ImageId: !Ref LatestAmiId
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Sub thirdparty-instance
              - !Ref AWS::StackName
  
  # EC2 Instance Connect Endpoint
  ThirdPartyEICEndpoint:
    Type: AWS::EC2::InstanceConnectEndpoint
    Properties:
      PreserveClientIp: false
      SecurityGroupIds: 
        - !Ref VPCThirdPartyEndpointSecurityGroup
      SubnetId: !Ref ThirdPartyEndpointSubneta
      Tags: 
        - Key: Name
          Value : !Join
            - '-'
            - - !Sub thirdparty-eic
              - !Ref AWS::StackName

  # ---------- CLOUD WAN ATTACHMENTS ----------
  # Production VPC
  ProdCWANAttachment:
    Condition: Deploy
    Type: AWS::NetworkManager::VpcAttachment
    Properties:
      CoreNetworkId: !Ref CoreNetworkId
      SubnetArns:
        - Fn::Join:
            - ""
            - - "arn:aws:ec2:"
              - Ref: AWS::Region
              - ":"
              - Ref: AWS::AccountId
              - ":subnet/"
              - Ref: ProductionCWANSubneta
        - Fn::Join:
            - ""
            - - "arn:aws:ec2:"
              - Ref: AWS::Region
              - ":"
              - Ref: AWS::AccountId
              - ":subnet/"
              - Ref: ProductionCWANSubnetb
      Tags:
        - Key: domain
          Value: prod
      VpcArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":ec2:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":vpc/"
            - Ref: ProductionVPC
  
  # For::Each iteration: per Availability Zone
  # 0.0.0.0/0 route from Private subnets to CWAN
  'Fn::ForEach::ProdVPCRoutes':
    - AvailabilityZone
    - [a, b]
    - 'ProductionPrivateToCWAN${AvailabilityZone}':
        DependsOn: 
          - ProdCWANAttachment
        Type: AWS::EC2::Route
        Condition: Deploy
        Properties:
          RouteTableId: !Ref
            'Fn::Sub': 'ProductionPrivateRouteTable${AvailabilityZone}'
          DestinationCidrBlock: '0.0.0.0/0'
          CoreNetworkArn: !Ref CoreNetworkArn

  # Third-Party VPC
  ThirdPartyCWANAttachment:
    Condition: Deploy
    Type: AWS::NetworkManager::VpcAttachment
    Properties:
      CoreNetworkId: !Ref CoreNetworkId
      SubnetArns:
        - Fn::Join:
            - ""
            - - "arn:aws:ec2:"
              - Ref: AWS::Region
              - ":"
              - Ref: AWS::AccountId
              - ":subnet/"
              - Ref: ThirdPartyCWANSubneta
        - Fn::Join:
            - ""
            - - "arn:aws:ec2:"
              - Ref: AWS::Region
              - ":"
              - Ref: AWS::AccountId
              - ":subnet/"
              - Ref: ThirdPartyCWANSubnetb
      Tags:
        - Key: domain
          Value: thirdparty
      VpcArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":ec2:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":vpc/"
            - Ref: ThirdPartyVPC
  
  # For::Each iteration: per Availability Zone
  # 0.0.0.0/0 route from Private subnets to CWAN
  'Fn::ForEach::ThirdPartyVPCRoutes':
    - AvailabilityZone
    - [a, b]
    - 'ThirdPartyPrivateToCWAN${AvailabilityZone}':
        DependsOn: 
          - ThirdPartyCWANAttachment
        Type: AWS::EC2::Route
        Condition: Deploy
        Properties:
          RouteTableId: !Ref
            'Fn::Sub': 'ThirdPartyPrivateRouteTable${AvailabilityZone}'
          DestinationCidrBlock: '0.0.0.0/0'
          CoreNetworkArn: !Ref CoreNetworkArn